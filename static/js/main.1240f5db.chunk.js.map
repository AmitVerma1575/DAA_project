{"version":3,"sources":["components/Node.jsx","algorithm-logic/dijkstra.js","components/DijkstraVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","row","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","addedClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","DijkstraVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWalls","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","unshift","getNodesInShortestPathOrder","animateDijkstra","forEach","style","color","onClick","visualizeDijkstra","resetBoard","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1240f5db.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      row,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n    } = this.props;\n\n    // Detirmine if the node will be a wall, start, or finish\n    const addedClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${addedClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}\n","// We want to return all of the visited nodes in the order in which they were visited.\n// Each node needs to keep track of two things:\n// 1. Distance from start node.\n// 2. The node that was visitied before it.\n// We will backtrack from the final node to find the shortest path.\n\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  // Set the distance of the start node to 0.\n  startNode.distance = 0;\n  // Get all of the nodes on the grid.\n  const unvisitedNodes = getAllNodes(grid);\n  // Use while loop as long as unvisitedNodes contains any nodes.\n  while (!!unvisitedNodes.length) {\n    // Sort nodes by their distance from the start node.\n    sortNodesByDistance(unvisitedNodes);\n    // Since the start node has distance = 0, it will become the closestNode\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall skip it\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity we are trapped.\n    // The first run through, the start node should have a distance of 0, then\n    // when we updateUnvisitedNeighbors, the closest node should have a distance of 1.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    // Mark that we have visited the closest node.\n    closestNode.isVisited = true;\n    // Add closest node to array of visited nodes.\n    visitedNodesInOrder.push(closestNode);\n    // If we reach the end, return array of visited nodes in order we visited them.\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    // If we didnt reach the end, we need to visit all our neighbors next...\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\n// Grab every node in the whole grid.\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Sort the nodes in unvisitedNodes array by their distance from startNode.\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\n// This will find the unvisited neighbor nodes from the current node we are on.\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  // If we are in the 2nd row or lower, add the neighbor above node.\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  // If we are in the 2nd row from bottom or above, add neighbor below node.\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  // If we are in the 2nd column or more, add neighbor to the left of node.\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  // If we are in the 2nd to last column or less, add neighbor to the right of node.\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  // Return all the neighbors to the node that arent visited yet.\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\n// Update the distance values for each neighbor.\nfunction updateUnvisitedNeighbors(closestNode, grid) {\n  // First get all neighbors for current node.\n  const unvisitedNeighbors = getUnvisitedNeighbors(closestNode, grid);\n  // For each neighbor of the current node...\n  for (const neighbor of unvisitedNeighbors) {\n    // Make their distance value 1 more than closestNode\n    neighbor.distance = closestNode.distance + 1;\n    // Mark the previousNode value as the current node we are working with.\n    neighbor.previousNode = closestNode;\n  }\n}\n\n// Backtracks from the finishNode to find the shortest path to startNode.\n// Must be called AFTER the dijkstra method!\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  // While the finishNode isnt null\n  while (finishNode !== null) {\n    nodesInShortestPathOrder.unshift(finishNode);\n    finishNode = finishNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, {Component} from 'react';\nimport Node from './Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithm-logic/dijkstra';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class DijkstraVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    // Set initial grid when component mounts\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    // Create a new grid that includes the walls just created\n    const newGrid = getNewGridWithWalls(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  // Handles when mouse enters a div or element\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    // Create a new grid that includes the walls just created\n    const newGrid = getNewGridWithWalls(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      // Once we get to the last node we have visited, show shortest path.\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      // Update the css for each of the nodes we have visited to show animation of searching.\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    // Get all nodes that we have visited, in order visited.\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    // Calculate the shortest path backtracking from the finish node.\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    // Finally, show the animaitions for searching and shortest path.\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  resetBoard() {\n    const grid = getInitialGrid();\n    grid.forEach(row => {\n      row.forEach(node =>  {\n        if (node.isStart) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-start';\n        } else if (node.isFinish) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-finish';\n        } else {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node';\n        }\n      })\n    })\n    this.setState({grid});\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <>\n        <h5>Click on a square and drag to place walls between the starting node <span style={{color: \"green\"}}>(green)</span> and the end node <span style={{color: \"red\"}}>(red).</span> </h5>\n        <h5>Once all the walls are placed, click the button below to find the shortest path between start and finish using Dijkstra's Algorithm.</h5>\n        <hr></hr>\n        <div onClick={() => this.visualizeDijkstra()}><a className=\"visualize-button\">Visualize Dijkstra's Algorithm</a></div>\n        <div onClick={() => this.resetBoard()}><a className=\"reset-button\">Reset</a></div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      row={row}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                      onMouseUp={() => this.handleMouseUp()}>\n                    </Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\n// Create a 50 row and 20 column grid with custom nodes.\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\n// Create layout for each node object in the grid.\n// Distance always starts at Infinity, all nodes arent visited, and arent walls.\n// PreviousNode will be the node we were on before we reached current node.\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\n// Update the grid to include the wall that we just added.\nconst getNewGridWithWalls = (grid, row, col) => {\n  // Create a copy of the current grid.\n  const newGrid = grid.slice();\n  // Isolate the current node clicked on\n  const node = newGrid[row][col];\n  // Copy all existing attributes, then make node a wall/take wall away.\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  // Update the node in newGrid to be the new node we just created.\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from 'react';\nimport './App.css';\nimport DijkstraVisualizer from './components/DijkstraVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DijkstraVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}